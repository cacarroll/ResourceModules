name: 'Validate module'
description: 'Validate module'

inputs:
  templateFilePath:
    description: 'The path to the template file to use for testing & deployment'
    required: true
  parameterFilePath:
    description: 'The path to the parameter file to use for testing & deployment'
    required: true
  location:
    description: 'The location to use for deployment'
    required: true
  resourceGroupName:
    description: 'The resource group to deploy to'
    required: false
  subscriptionId:
    description: 'The subscriptionId to deploy to'
    required: false
  managementGroupId:
    description: 'The managementGroupId to deploy to'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Setup agent & login'
      shell: pwsh
      run: |
        # Load used functions
        . ".github/actions/sharedScripts/Set-EnvironmentOnAgent.ps1"
        # Set agent up
        Set-EnvironmentOnAgent

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        environment: 'AzureUSGovernment'
        enable-AzPSSession: true

    - name: 'Replace Tokens [${{ inputs.parameterFilePath }}] '
      shell: pwsh
      run: |
        # Load used funtions
        . ".github/actions/sharedScripts/Convert-TokensInFiles.ps1"
        $TokensReplaceWithObject = @(
            @{ Replace = "<<subscriptionId>>"; With = '${{ inputs.subscriptionId }}' }
        )
        write-verbose "Invoking Convert-TokensInFiles"
        Convert-TokensInFiles -Paths '${{ inputs.parameterFilePath }}' -TokensReplaceWith $TokensReplaceWithObject

      # [Test Deployment] task(s)
      #--------------------------
    - name: 'Validate [${{ inputs.templateFilePath }}]'
      shell: pwsh
      run: |
        # Load used functions
        . "$env:GITHUB_ACTION_PATH/scripts/Test-TemplateWithParameterFile.ps1"

        # ----------- #
        # INVOKE TEST #
        # ----------- #
        $functionInput = @{
          templateFilePath   = '${{ inputs.templateFilePath }}'
          parameterFilePath  = '${{ inputs.parameterFilePath }}'
          location           = '${{ inputs.location }}'
          resourceGroupName  = '${{ inputs.resourceGroupName }}'
          subscriptionId     = '${{ inputs.subscriptionId }}'
          managementGroupId  = '${{ inputs.managementGroupId }}'
        }

        Write-Verbose "Invoke task with" -Verbose
        Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

        Test-TemplateWithParameterFile @functionInput -Verbose
